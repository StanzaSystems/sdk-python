# coding: utf-8

"""
    Stanza Hub API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@stanza.systems
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six
from getstanza.hub.configuration import Configuration


class V1GuardConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "validate_ingress_tokens": "bool",
        "check_quota": "bool",
        "quota_tags": "list[str]",
        "report_only": "bool",
    }

    attribute_map = {
        "validate_ingress_tokens": "validateIngressTokens",
        "check_quota": "checkQuota",
        "quota_tags": "quotaTags",
        "report_only": "reportOnly",
    }

    def __init__(
        self,
        validate_ingress_tokens=None,
        check_quota=None,
        quota_tags=None,
        report_only=None,
        _configuration=None,
    ):  # noqa: E501
        """V1GuardConfig - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._validate_ingress_tokens = None
        self._check_quota = None
        self._quota_tags = None
        self._report_only = None
        self.discriminator = None

        if validate_ingress_tokens is not None:
            self.validate_ingress_tokens = validate_ingress_tokens
        if check_quota is not None:
            self.check_quota = check_quota
        if quota_tags is not None:
            self.quota_tags = quota_tags
        if report_only is not None:
            self.report_only = report_only

    @property
    def validate_ingress_tokens(self):
        """Gets the validate_ingress_tokens of this V1GuardConfig.  # noqa: E501

        Boolean representing wether to validate contents of the X-Stanza-Token header.  # noqa: E501

        :return: The validate_ingress_tokens of this V1GuardConfig.  # noqa: E501
        :rtype: bool
        """
        return self._validate_ingress_tokens

    @validate_ingress_tokens.setter
    def validate_ingress_tokens(self, validate_ingress_tokens):
        """Sets the validate_ingress_tokens of this V1GuardConfig.

        Boolean representing wether to validate contents of the X-Stanza-Token header.  # noqa: E501

        :param validate_ingress_tokens: The validate_ingress_tokens of this V1GuardConfig.  # noqa: E501
        :type: bool
        """

        self._validate_ingress_tokens = validate_ingress_tokens

    @property
    def check_quota(self):
        """Gets the check_quota of this V1GuardConfig.  # noqa: E501

        Boolean representing whether quota checks are enabled.  # noqa: E501

        :return: The check_quota of this V1GuardConfig.  # noqa: E501
        :rtype: bool
        """
        return self._check_quota

    @check_quota.setter
    def check_quota(self, check_quota):
        """Sets the check_quota of this V1GuardConfig.

        Boolean representing whether quota checks are enabled.  # noqa: E501

        :param check_quota: The check_quota of this V1GuardConfig.  # noqa: E501
        :type: bool
        """

        self._check_quota = check_quota

    @property
    def quota_tags(self):
        """Gets the quota_tags of this V1GuardConfig.  # noqa: E501

        The set of tags which are used for quota management. For example, a 'customer_id' tag might be used to implement per-customer quota limits. Only the tags listed here should be included in GetToken and GetTokenLease requests.  # noqa: E501

        :return: The quota_tags of this V1GuardConfig.  # noqa: E501
        :rtype: list[str]
        """
        return self._quota_tags

    @quota_tags.setter
    def quota_tags(self, quota_tags):
        """Sets the quota_tags of this V1GuardConfig.

        The set of tags which are used for quota management. For example, a 'customer_id' tag might be used to implement per-customer quota limits. Only the tags listed here should be included in GetToken and GetTokenLease requests.  # noqa: E501

        :param quota_tags: The quota_tags of this V1GuardConfig.  # noqa: E501
        :type: list[str]
        """

        self._quota_tags = quota_tags

    @property
    def report_only(self):
        """Gets the report_only of this V1GuardConfig.  # noqa: E501

        If report_only is true then the SDK should perform all load management logic and emit statistics, but never actually throttle or deny requests for any reason. However, the SDK should emit accurate metrics about what actions would normally be taken if Report Only mode were not enabled. The purpose of this is to allow users to assess the impact of enabling a Guard without risking over-throttling traffic. The label mode=\"report_only\" should be set on all metrics sent to Stanza.  # noqa: E501

        :return: The report_only of this V1GuardConfig.  # noqa: E501
        :rtype: bool
        """
        return self._report_only

    @report_only.setter
    def report_only(self, report_only):
        """Sets the report_only of this V1GuardConfig.

        If report_only is true then the SDK should perform all load management logic and emit statistics, but never actually throttle or deny requests for any reason. However, the SDK should emit accurate metrics about what actions would normally be taken if Report Only mode were not enabled. The purpose of this is to allow users to assess the impact of enabling a Guard without risking over-throttling traffic. The label mode=\"report_only\" should be set on all metrics sent to Stanza.  # noqa: E501

        :param report_only: The report_only of this V1GuardConfig.  # noqa: E501
        :type: bool
        """

        self._report_only = report_only

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(V1GuardConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1GuardConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1GuardConfig):
            return True

        return self.to_dict() != other.to_dict()
