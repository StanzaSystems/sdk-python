# coding: utf-8

"""
    Stanza Hub API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@stanza.systems
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six
from getstanza.hub.configuration import Configuration


class V1TraceConfigOverride(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {"sample_rate": "float", "span_selectors": "list[V1SpanSelector]"}

    attribute_map = {"sample_rate": "sampleRate", "span_selectors": "spanSelectors"}

    def __init__(
        self, sample_rate=None, span_selectors=None, _configuration=None
    ):  # noqa: E501
        """V1TraceConfigOverride - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._sample_rate = None
        self._span_selectors = None
        self.discriminator = None

        if sample_rate is not None:
            self.sample_rate = sample_rate
        if span_selectors is not None:
            self.span_selectors = span_selectors

    @property
    def sample_rate(self):
        """Gets the sample_rate of this V1TraceConfigOverride.  # noqa: E501


        :return: The sample_rate of this V1TraceConfigOverride.  # noqa: E501
        :rtype: float
        """
        return self._sample_rate

    @sample_rate.setter
    def sample_rate(self, sample_rate):
        """Sets the sample_rate of this V1TraceConfigOverride.


        :param sample_rate: The sample_rate of this V1TraceConfigOverride.  # noqa: E501
        :type: float
        """

        self._sample_rate = sample_rate

    @property
    def span_selectors(self):
        """Gets the span_selectors of this V1TraceConfigOverride.  # noqa: E501


        :return: The span_selectors of this V1TraceConfigOverride.  # noqa: E501
        :rtype: list[V1SpanSelector]
        """
        return self._span_selectors

    @span_selectors.setter
    def span_selectors(self, span_selectors):
        """Sets the span_selectors of this V1TraceConfigOverride.


        :param span_selectors: The span_selectors of this V1TraceConfigOverride.  # noqa: E501
        :type: list[V1SpanSelector]
        """

        self._span_selectors = span_selectors

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(V1TraceConfigOverride, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1TraceConfigOverride):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1TraceConfigOverride):
            return True

        return self.to_dict() != other.to_dict()
