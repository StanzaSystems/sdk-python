# coding: utf-8

"""
    Stanza Hub API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@stanza.systems
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six
from getstanza.hub.configuration import Configuration


class V1ServiceConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "customer_id": "str",
        "trace_config": "V1TraceConfig",
        "metric_config": "V1MetricConfig",
        "sentinel_config": "V1SentinelConfig",
    }

    attribute_map = {
        "customer_id": "customerId",
        "trace_config": "traceConfig",
        "metric_config": "metricConfig",
        "sentinel_config": "sentinelConfig",
    }

    def __init__(
        self,
        customer_id=None,
        trace_config=None,
        metric_config=None,
        sentinel_config=None,
        _configuration=None,
    ):  # noqa: E501
        """V1ServiceConfig - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._customer_id = None
        self._trace_config = None
        self._metric_config = None
        self._sentinel_config = None
        self.discriminator = None

        if customer_id is not None:
            self.customer_id = customer_id
        if trace_config is not None:
            self.trace_config = trace_config
        if metric_config is not None:
            self.metric_config = metric_config
        if sentinel_config is not None:
            self.sentinel_config = sentinel_config

    @property
    def customer_id(self):
        """Gets the customer_id of this V1ServiceConfig.  # noqa: E501


        :return: The customer_id of this V1ServiceConfig.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this V1ServiceConfig.


        :param customer_id: The customer_id of this V1ServiceConfig.  # noqa: E501
        :type: str
        """

        self._customer_id = customer_id

    @property
    def trace_config(self):
        """Gets the trace_config of this V1ServiceConfig.  # noqa: E501


        :return: The trace_config of this V1ServiceConfig.  # noqa: E501
        :rtype: V1TraceConfig
        """
        return self._trace_config

    @trace_config.setter
    def trace_config(self, trace_config):
        """Sets the trace_config of this V1ServiceConfig.


        :param trace_config: The trace_config of this V1ServiceConfig.  # noqa: E501
        :type: V1TraceConfig
        """

        self._trace_config = trace_config

    @property
    def metric_config(self):
        """Gets the metric_config of this V1ServiceConfig.  # noqa: E501


        :return: The metric_config of this V1ServiceConfig.  # noqa: E501
        :rtype: V1MetricConfig
        """
        return self._metric_config

    @metric_config.setter
    def metric_config(self, metric_config):
        """Sets the metric_config of this V1ServiceConfig.


        :param metric_config: The metric_config of this V1ServiceConfig.  # noqa: E501
        :type: V1MetricConfig
        """

        self._metric_config = metric_config

    @property
    def sentinel_config(self):
        """Gets the sentinel_config of this V1ServiceConfig.  # noqa: E501


        :return: The sentinel_config of this V1ServiceConfig.  # noqa: E501
        :rtype: V1SentinelConfig
        """
        return self._sentinel_config

    @sentinel_config.setter
    def sentinel_config(self, sentinel_config):
        """Sets the sentinel_config of this V1ServiceConfig.


        :param sentinel_config: The sentinel_config of this V1ServiceConfig.  # noqa: E501
        :type: V1SentinelConfig
        """

        self._sentinel_config = sentinel_config

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(V1ServiceConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1ServiceConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1ServiceConfig):
            return True

        return self.to_dict() != other.to_dict()
