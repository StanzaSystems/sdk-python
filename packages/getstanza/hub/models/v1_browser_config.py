# coding: utf-8

"""
    Stanza Hub API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@stanza.systems
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six
from getstanza.hub.configuration import Configuration


class V1BrowserConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "enabled_percent": "int",
        "action_code_enabled": "int",
        "message_enabled": "str",
        "action_code_disabled": "int",
        "message_disabled": "str",
    }

    attribute_map = {
        "enabled_percent": "enabledPercent",
        "action_code_enabled": "actionCodeEnabled",
        "message_enabled": "messageEnabled",
        "action_code_disabled": "actionCodeDisabled",
        "message_disabled": "messageDisabled",
    }

    def __init__(
        self,
        enabled_percent=None,
        action_code_enabled=None,
        message_enabled=None,
        action_code_disabled=None,
        message_disabled=None,
        _configuration=None,
    ):  # noqa: E501
        """V1BrowserConfig - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._enabled_percent = None
        self._action_code_enabled = None
        self._message_enabled = None
        self._action_code_disabled = None
        self._message_disabled = None
        self.discriminator = None

        if enabled_percent is not None:
            self.enabled_percent = enabled_percent
        if action_code_enabled is not None:
            self.action_code_enabled = action_code_enabled
        if message_enabled is not None:
            self.message_enabled = message_enabled
        if action_code_disabled is not None:
            self.action_code_disabled = action_code_disabled
        if message_disabled is not None:
            self.message_disabled = message_disabled

    @property
    def enabled_percent(self):
        """Gets the enabled_percent of this V1BrowserConfig.  # noqa: E501


        :return: The enabled_percent of this V1BrowserConfig.  # noqa: E501
        :rtype: int
        """
        return self._enabled_percent

    @enabled_percent.setter
    def enabled_percent(self, enabled_percent):
        """Sets the enabled_percent of this V1BrowserConfig.


        :param enabled_percent: The enabled_percent of this V1BrowserConfig.  # noqa: E501
        :type: int
        """

        self._enabled_percent = enabled_percent

    @property
    def action_code_enabled(self):
        """Gets the action_code_enabled of this V1BrowserConfig.  # noqa: E501


        :return: The action_code_enabled of this V1BrowserConfig.  # noqa: E501
        :rtype: int
        """
        return self._action_code_enabled

    @action_code_enabled.setter
    def action_code_enabled(self, action_code_enabled):
        """Sets the action_code_enabled of this V1BrowserConfig.


        :param action_code_enabled: The action_code_enabled of this V1BrowserConfig.  # noqa: E501
        :type: int
        """

        self._action_code_enabled = action_code_enabled

    @property
    def message_enabled(self):
        """Gets the message_enabled of this V1BrowserConfig.  # noqa: E501


        :return: The message_enabled of this V1BrowserConfig.  # noqa: E501
        :rtype: str
        """
        return self._message_enabled

    @message_enabled.setter
    def message_enabled(self, message_enabled):
        """Sets the message_enabled of this V1BrowserConfig.


        :param message_enabled: The message_enabled of this V1BrowserConfig.  # noqa: E501
        :type: str
        """

        self._message_enabled = message_enabled

    @property
    def action_code_disabled(self):
        """Gets the action_code_disabled of this V1BrowserConfig.  # noqa: E501


        :return: The action_code_disabled of this V1BrowserConfig.  # noqa: E501
        :rtype: int
        """
        return self._action_code_disabled

    @action_code_disabled.setter
    def action_code_disabled(self, action_code_disabled):
        """Sets the action_code_disabled of this V1BrowserConfig.


        :param action_code_disabled: The action_code_disabled of this V1BrowserConfig.  # noqa: E501
        :type: int
        """

        self._action_code_disabled = action_code_disabled

    @property
    def message_disabled(self):
        """Gets the message_disabled of this V1BrowserConfig.  # noqa: E501


        :return: The message_disabled of this V1BrowserConfig.  # noqa: E501
        :rtype: str
        """
        return self._message_disabled

    @message_disabled.setter
    def message_disabled(self, message_disabled):
        """Sets the message_disabled of this V1BrowserConfig.


        :param message_disabled: The message_disabled of this V1BrowserConfig.  # noqa: E501
        :type: str
        """

        self._message_disabled = message_disabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(V1BrowserConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1BrowserConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1BrowserConfig):
            return True

        return self.to_dict() != other.to_dict()
