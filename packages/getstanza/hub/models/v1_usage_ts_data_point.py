# coding: utf-8

"""
    Stanza Hub API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@stanza.systems
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six
from getstanza.hub.configuration import Configuration


class V1UsageTSDataPoint(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "start_ts": "datetime",
        "end_ts": "datetime",
        "granted": "int",
        "granted_weight": "float",
        "not_granted": "int",
        "not_granted_weight": "float",
        "be_burst": "int",
        "be_burst_weight": "float",
        "parent_reject": "int",
        "parent_reject_weight": "float",
    }

    attribute_map = {
        "start_ts": "startTs",
        "end_ts": "endTs",
        "granted": "granted",
        "granted_weight": "grantedWeight",
        "not_granted": "notGranted",
        "not_granted_weight": "notGrantedWeight",
        "be_burst": "beBurst",
        "be_burst_weight": "beBurstWeight",
        "parent_reject": "parentReject",
        "parent_reject_weight": "parentRejectWeight",
    }

    def __init__(
        self,
        start_ts=None,
        end_ts=None,
        granted=None,
        granted_weight=None,
        not_granted=None,
        not_granted_weight=None,
        be_burst=None,
        be_burst_weight=None,
        parent_reject=None,
        parent_reject_weight=None,
        _configuration=None,
    ):  # noqa: E501
        """V1UsageTSDataPoint - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._start_ts = None
        self._end_ts = None
        self._granted = None
        self._granted_weight = None
        self._not_granted = None
        self._not_granted_weight = None
        self._be_burst = None
        self._be_burst_weight = None
        self._parent_reject = None
        self._parent_reject_weight = None
        self.discriminator = None

        if start_ts is not None:
            self.start_ts = start_ts
        if end_ts is not None:
            self.end_ts = end_ts
        if granted is not None:
            self.granted = granted
        if granted_weight is not None:
            self.granted_weight = granted_weight
        if not_granted is not None:
            self.not_granted = not_granted
        if not_granted_weight is not None:
            self.not_granted_weight = not_granted_weight
        if be_burst is not None:
            self.be_burst = be_burst
        if be_burst_weight is not None:
            self.be_burst_weight = be_burst_weight
        if parent_reject is not None:
            self.parent_reject = parent_reject
        if parent_reject_weight is not None:
            self.parent_reject_weight = parent_reject_weight

    @property
    def start_ts(self):
        """Gets the start_ts of this V1UsageTSDataPoint.  # noqa: E501


        :return: The start_ts of this V1UsageTSDataPoint.  # noqa: E501
        :rtype: datetime
        """
        return self._start_ts

    @start_ts.setter
    def start_ts(self, start_ts):
        """Sets the start_ts of this V1UsageTSDataPoint.


        :param start_ts: The start_ts of this V1UsageTSDataPoint.  # noqa: E501
        :type: datetime
        """

        self._start_ts = start_ts

    @property
    def end_ts(self):
        """Gets the end_ts of this V1UsageTSDataPoint.  # noqa: E501


        :return: The end_ts of this V1UsageTSDataPoint.  # noqa: E501
        :rtype: datetime
        """
        return self._end_ts

    @end_ts.setter
    def end_ts(self, end_ts):
        """Sets the end_ts of this V1UsageTSDataPoint.


        :param end_ts: The end_ts of this V1UsageTSDataPoint.  # noqa: E501
        :type: datetime
        """

        self._end_ts = end_ts

    @property
    def granted(self):
        """Gets the granted of this V1UsageTSDataPoint.  # noqa: E501


        :return: The granted of this V1UsageTSDataPoint.  # noqa: E501
        :rtype: int
        """
        return self._granted

    @granted.setter
    def granted(self, granted):
        """Sets the granted of this V1UsageTSDataPoint.


        :param granted: The granted of this V1UsageTSDataPoint.  # noqa: E501
        :type: int
        """

        self._granted = granted

    @property
    def granted_weight(self):
        """Gets the granted_weight of this V1UsageTSDataPoint.  # noqa: E501


        :return: The granted_weight of this V1UsageTSDataPoint.  # noqa: E501
        :rtype: float
        """
        return self._granted_weight

    @granted_weight.setter
    def granted_weight(self, granted_weight):
        """Sets the granted_weight of this V1UsageTSDataPoint.


        :param granted_weight: The granted_weight of this V1UsageTSDataPoint.  # noqa: E501
        :type: float
        """

        self._granted_weight = granted_weight

    @property
    def not_granted(self):
        """Gets the not_granted of this V1UsageTSDataPoint.  # noqa: E501


        :return: The not_granted of this V1UsageTSDataPoint.  # noqa: E501
        :rtype: int
        """
        return self._not_granted

    @not_granted.setter
    def not_granted(self, not_granted):
        """Sets the not_granted of this V1UsageTSDataPoint.


        :param not_granted: The not_granted of this V1UsageTSDataPoint.  # noqa: E501
        :type: int
        """

        self._not_granted = not_granted

    @property
    def not_granted_weight(self):
        """Gets the not_granted_weight of this V1UsageTSDataPoint.  # noqa: E501


        :return: The not_granted_weight of this V1UsageTSDataPoint.  # noqa: E501
        :rtype: float
        """
        return self._not_granted_weight

    @not_granted_weight.setter
    def not_granted_weight(self, not_granted_weight):
        """Sets the not_granted_weight of this V1UsageTSDataPoint.


        :param not_granted_weight: The not_granted_weight of this V1UsageTSDataPoint.  # noqa: E501
        :type: float
        """

        self._not_granted_weight = not_granted_weight

    @property
    def be_burst(self):
        """Gets the be_burst of this V1UsageTSDataPoint.  # noqa: E501


        :return: The be_burst of this V1UsageTSDataPoint.  # noqa: E501
        :rtype: int
        """
        return self._be_burst

    @be_burst.setter
    def be_burst(self, be_burst):
        """Sets the be_burst of this V1UsageTSDataPoint.


        :param be_burst: The be_burst of this V1UsageTSDataPoint.  # noqa: E501
        :type: int
        """

        self._be_burst = be_burst

    @property
    def be_burst_weight(self):
        """Gets the be_burst_weight of this V1UsageTSDataPoint.  # noqa: E501


        :return: The be_burst_weight of this V1UsageTSDataPoint.  # noqa: E501
        :rtype: float
        """
        return self._be_burst_weight

    @be_burst_weight.setter
    def be_burst_weight(self, be_burst_weight):
        """Sets the be_burst_weight of this V1UsageTSDataPoint.


        :param be_burst_weight: The be_burst_weight of this V1UsageTSDataPoint.  # noqa: E501
        :type: float
        """

        self._be_burst_weight = be_burst_weight

    @property
    def parent_reject(self):
        """Gets the parent_reject of this V1UsageTSDataPoint.  # noqa: E501


        :return: The parent_reject of this V1UsageTSDataPoint.  # noqa: E501
        :rtype: int
        """
        return self._parent_reject

    @parent_reject.setter
    def parent_reject(self, parent_reject):
        """Sets the parent_reject of this V1UsageTSDataPoint.


        :param parent_reject: The parent_reject of this V1UsageTSDataPoint.  # noqa: E501
        :type: int
        """

        self._parent_reject = parent_reject

    @property
    def parent_reject_weight(self):
        """Gets the parent_reject_weight of this V1UsageTSDataPoint.  # noqa: E501


        :return: The parent_reject_weight of this V1UsageTSDataPoint.  # noqa: E501
        :rtype: float
        """
        return self._parent_reject_weight

    @parent_reject_weight.setter
    def parent_reject_weight(self, parent_reject_weight):
        """Sets the parent_reject_weight of this V1UsageTSDataPoint.


        :param parent_reject_weight: The parent_reject_weight of this V1UsageTSDataPoint.  # noqa: E501
        :type: float
        """

        self._parent_reject_weight = parent_reject_weight

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(V1UsageTSDataPoint, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1UsageTSDataPoint):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1UsageTSDataPoint):
            return True

        return self.to_dict() != other.to_dict()
