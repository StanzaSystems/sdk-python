# coding: utf-8

"""
    Stanza Hub API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@stanza.systems
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six
from getstanza.hub.configuration import Configuration


class V1ServiceSelector(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "environment": "str",
        "name": "str",
        "release": "str",
        "tags": "list[Hubv1Tag]",
    }

    attribute_map = {
        "environment": "environment",
        "name": "name",
        "release": "release",
        "tags": "tags",
    }

    def __init__(
        self, environment=None, name=None, release=None, tags=None, _configuration=None
    ):  # noqa: E501
        """V1ServiceSelector - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._environment = None
        self._name = None
        self._release = None
        self._tags = None
        self.discriminator = None

        self.environment = environment
        self.name = name
        if release is not None:
            self.release = release
        if tags is not None:
            self.tags = tags

    @property
    def environment(self):
        """Gets the environment of this V1ServiceSelector.  # noqa: E501


        :return: The environment of this V1ServiceSelector.  # noqa: E501
        :rtype: str
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this V1ServiceSelector.


        :param environment: The environment of this V1ServiceSelector.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and environment is None:
            raise ValueError(
                "Invalid value for `environment`, must not be `None`"
            )  # noqa: E501

        self._environment = environment

    @property
    def name(self):
        """Gets the name of this V1ServiceSelector.  # noqa: E501


        :return: The name of this V1ServiceSelector.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V1ServiceSelector.


        :param name: The name of this V1ServiceSelector.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError(
                "Invalid value for `name`, must not be `None`"
            )  # noqa: E501

        self._name = name

    @property
    def release(self):
        """Gets the release of this V1ServiceSelector.  # noqa: E501


        :return: The release of this V1ServiceSelector.  # noqa: E501
        :rtype: str
        """
        return self._release

    @release.setter
    def release(self, release):
        """Sets the release of this V1ServiceSelector.


        :param release: The release of this V1ServiceSelector.  # noqa: E501
        :type: str
        """

        self._release = release

    @property
    def tags(self):
        """Gets the tags of this V1ServiceSelector.  # noqa: E501


        :return: The tags of this V1ServiceSelector.  # noqa: E501
        :rtype: list[Hubv1Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this V1ServiceSelector.


        :param tags: The tags of this V1ServiceSelector.  # noqa: E501
        :type: list[Hubv1Tag]
        """

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(V1ServiceSelector, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1ServiceSelector):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1ServiceSelector):
            return True

        return self.to_dict() != other.to_dict()
