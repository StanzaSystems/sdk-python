# coding: utf-8

"""
    Stanza Hub API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@stanza.systems
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six
from getstanza.hub.configuration import Configuration


class V1GetTokenRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "selector": "V1GuardFeatureSelector",
        "client_id": "str",
        "priority_boost": "int",
        "weight": "float",
    }

    attribute_map = {
        "selector": "selector",
        "client_id": "clientId",
        "priority_boost": "priorityBoost",
        "weight": "weight",
    }

    def __init__(
        self,
        selector=None,
        client_id=None,
        priority_boost=None,
        weight=None,
        _configuration=None,
    ):  # noqa: E501
        """V1GetTokenRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._selector = None
        self._client_id = None
        self._priority_boost = None
        self._weight = None
        self.discriminator = None

        self.selector = selector
        if client_id is not None:
            self.client_id = client_id
        if priority_boost is not None:
            self.priority_boost = priority_boost
        if weight is not None:
            self.weight = weight

    @property
    def selector(self):
        """Gets the selector of this V1GetTokenRequest.  # noqa: E501

        Only tags which are used for quota management should be included here - i.e. the list of quota_tags returned by the GetGuardConfig endpoint for this Guard. If tags are in use only one quota token will be issued at a time.  # noqa: E501

        :return: The selector of this V1GetTokenRequest.  # noqa: E501
        :rtype: V1GuardFeatureSelector
        """
        return self._selector

    @selector.setter
    def selector(self, selector):
        """Sets the selector of this V1GetTokenRequest.

        Only tags which are used for quota management should be included here - i.e. the list of quota_tags returned by the GetGuardConfig endpoint for this Guard. If tags are in use only one quota token will be issued at a time.  # noqa: E501

        :param selector: The selector of this V1GetTokenRequest.  # noqa: E501
        :type: V1GuardFeatureSelector
        """
        if self._configuration.client_side_validation and selector is None:
            raise ValueError(
                "Invalid value for `selector`, must not be `None`"
            )  # noqa: E501

        self._selector = selector

    @property
    def client_id(self):
        """Gets the client_id of this V1GetTokenRequest.  # noqa: E501

        Used for tracking per-client token usage, allowing automatic determination of efficient batch leases. ID should be assigned by Stanza clients and be unique per-customer. Host or instance names may be used, or a UUID. It is important that this value be stable over the lifetime of an instance: if it changes, then Stanza will not be able to efficiently assign batches of tokens.  # noqa: E501

        :return: The client_id of this V1GetTokenRequest.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this V1GetTokenRequest.

        Used for tracking per-client token usage, allowing automatic determination of efficient batch leases. ID should be assigned by Stanza clients and be unique per-customer. Host or instance names may be used, or a UUID. It is important that this value be stable over the lifetime of an instance: if it changes, then Stanza will not be able to efficiently assign batches of tokens.  # noqa: E501

        :param client_id: The client_id of this V1GetTokenRequest.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def priority_boost(self):
        """Gets the priority_boost of this V1GetTokenRequest.  # noqa: E501

        Used to increase or decrease priority of request, relative to normal feature priority.  # noqa: E501

        :return: The priority_boost of this V1GetTokenRequest.  # noqa: E501
        :rtype: int
        """
        return self._priority_boost

    @priority_boost.setter
    def priority_boost(self, priority_boost):
        """Sets the priority_boost of this V1GetTokenRequest.

        Used to increase or decrease priority of request, relative to normal feature priority.  # noqa: E501

        :param priority_boost: The priority_boost of this V1GetTokenRequest.  # noqa: E501
        :type: int
        """

        self._priority_boost = priority_boost

    @property
    def weight(self):
        """Gets the weight of this V1GetTokenRequest.  # noqa: E501

        Used for request weighting, i.e. accounting for varying request sizes and costs. If not specified then a default value of 1 is used. In cases where weights/costs are not known upfront, users can send an initial estimate as the weight, and then later, when the exact cost is known, send an updated weight via the SetTokenLeaseConsumed rpc.  weight is optional; if not used then it is assumed that all requests have weight of 1.  # noqa: E501

        :return: The weight of this V1GetTokenRequest.  # noqa: E501
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this V1GetTokenRequest.

        Used for request weighting, i.e. accounting for varying request sizes and costs. If not specified then a default value of 1 is used. In cases where weights/costs are not known upfront, users can send an initial estimate as the weight, and then later, when the exact cost is known, send an updated weight via the SetTokenLeaseConsumed rpc.  weight is optional; if not used then it is assumed that all requests have weight of 1.  # noqa: E501

        :param weight: The weight of this V1GetTokenRequest.  # noqa: E501
        :type: float
        """

        self._weight = weight

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(V1GetTokenRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1GetTokenRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1GetTokenRequest):
            return True

        return self.to_dict() != other.to_dict()
