# coding: utf-8

"""
    Stanza Hub API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@stanza.systems
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six
from getstanza.hub.configuration import Configuration


class V1TraceConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "collector_url": "str",
        "sample_rate_default": "float",
        "overrides": "list[V1TraceConfigOverride]",
        "header_sample_configs": "list[V1HeaderTraceConfig]",
        "param_sample_configs": "list[V1ParamTraceConfig]",
    }

    attribute_map = {
        "collector_url": "collectorUrl",
        "sample_rate_default": "sampleRateDefault",
        "overrides": "overrides",
        "header_sample_configs": "headerSampleConfigs",
        "param_sample_configs": "paramSampleConfigs",
    }

    def __init__(
        self,
        collector_url=None,
        sample_rate_default=None,
        overrides=None,
        header_sample_configs=None,
        param_sample_configs=None,
        _configuration=None,
    ):  # noqa: E501
        """V1TraceConfig - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._collector_url = None
        self._sample_rate_default = None
        self._overrides = None
        self._header_sample_configs = None
        self._param_sample_configs = None
        self.discriminator = None

        if collector_url is not None:
            self.collector_url = collector_url
        if sample_rate_default is not None:
            self.sample_rate_default = sample_rate_default
        if overrides is not None:
            self.overrides = overrides
        if header_sample_configs is not None:
            self.header_sample_configs = header_sample_configs
        if param_sample_configs is not None:
            self.param_sample_configs = param_sample_configs

    @property
    def collector_url(self):
        """Gets the collector_url of this V1TraceConfig.  # noqa: E501

        URL of OTEL trace collector. If URL begins with http or https it will be treated as an HTTP collector, otherwise it will be treated as a gRPC collector.  # noqa: E501

        :return: The collector_url of this V1TraceConfig.  # noqa: E501
        :rtype: str
        """
        return self._collector_url

    @collector_url.setter
    def collector_url(self, collector_url):
        """Sets the collector_url of this V1TraceConfig.

        URL of OTEL trace collector. If URL begins with http or https it will be treated as an HTTP collector, otherwise it will be treated as a gRPC collector.  # noqa: E501

        :param collector_url: The collector_url of this V1TraceConfig.  # noqa: E501
        :type: str
        """

        self._collector_url = collector_url

    @property
    def sample_rate_default(self):
        """Gets the sample_rate_default of this V1TraceConfig.  # noqa: E501


        :return: The sample_rate_default of this V1TraceConfig.  # noqa: E501
        :rtype: float
        """
        return self._sample_rate_default

    @sample_rate_default.setter
    def sample_rate_default(self, sample_rate_default):
        """Sets the sample_rate_default of this V1TraceConfig.


        :param sample_rate_default: The sample_rate_default of this V1TraceConfig.  # noqa: E501
        :type: float
        """

        self._sample_rate_default = sample_rate_default

    @property
    def overrides(self):
        """Gets the overrides of this V1TraceConfig.  # noqa: E501


        :return: The overrides of this V1TraceConfig.  # noqa: E501
        :rtype: list[V1TraceConfigOverride]
        """
        return self._overrides

    @overrides.setter
    def overrides(self, overrides):
        """Sets the overrides of this V1TraceConfig.


        :param overrides: The overrides of this V1TraceConfig.  # noqa: E501
        :type: list[V1TraceConfigOverride]
        """

        self._overrides = overrides

    @property
    def header_sample_configs(self):
        """Gets the header_sample_configs of this V1TraceConfig.  # noqa: E501


        :return: The header_sample_configs of this V1TraceConfig.  # noqa: E501
        :rtype: list[V1HeaderTraceConfig]
        """
        return self._header_sample_configs

    @header_sample_configs.setter
    def header_sample_configs(self, header_sample_configs):
        """Sets the header_sample_configs of this V1TraceConfig.


        :param header_sample_configs: The header_sample_configs of this V1TraceConfig.  # noqa: E501
        :type: list[V1HeaderTraceConfig]
        """

        self._header_sample_configs = header_sample_configs

    @property
    def param_sample_configs(self):
        """Gets the param_sample_configs of this V1TraceConfig.  # noqa: E501


        :return: The param_sample_configs of this V1TraceConfig.  # noqa: E501
        :rtype: list[V1ParamTraceConfig]
        """
        return self._param_sample_configs

    @param_sample_configs.setter
    def param_sample_configs(self, param_sample_configs):
        """Sets the param_sample_configs of this V1TraceConfig.


        :param param_sample_configs: The param_sample_configs of this V1TraceConfig.  # noqa: E501
        :type: list[V1ParamTraceConfig]
        """

        self._param_sample_configs = param_sample_configs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(V1TraceConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1TraceConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1TraceConfig):
            return True

        return self.to_dict() != other.to_dict()
