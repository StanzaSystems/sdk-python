# coding: utf-8

"""
    Stanza Hub API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@stanza.systems
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six
from getstanza.hub.configuration import Configuration


class V1GetUsageRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "environment": "str",
        "guard": "str",
        "guard_query_mode": "V1QueryMode",
        "start_ts": "datetime",
        "end_ts": "datetime",
        "apikey": "str",
        "feature": "str",
        "feature_query_mode": "V1QueryMode",
        "service": "str",
        "service_query_mode": "V1QueryMode",
        "priority": "int",
        "priority_query_mode": "V1QueryMode",
        "report_tags": "list[str]",
        "tags": "list[Hubv1Tag]",
        "report_all_tags": "bool",
        "step": "str",
    }

    attribute_map = {
        "environment": "environment",
        "guard": "guard",
        "guard_query_mode": "guardQueryMode",
        "start_ts": "startTs",
        "end_ts": "endTs",
        "apikey": "apikey",
        "feature": "feature",
        "feature_query_mode": "featureQueryMode",
        "service": "service",
        "service_query_mode": "serviceQueryMode",
        "priority": "priority",
        "priority_query_mode": "priorityQueryMode",
        "report_tags": "reportTags",
        "tags": "tags",
        "report_all_tags": "reportAllTags",
        "step": "step",
    }

    def __init__(
        self,
        environment=None,
        guard=None,
        guard_query_mode=None,
        start_ts=None,
        end_ts=None,
        apikey=None,
        feature=None,
        feature_query_mode=None,
        service=None,
        service_query_mode=None,
        priority=None,
        priority_query_mode=None,
        report_tags=None,
        tags=None,
        report_all_tags=None,
        step=None,
        _configuration=None,
    ):  # noqa: E501
        """V1GetUsageRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._environment = None
        self._guard = None
        self._guard_query_mode = None
        self._start_ts = None
        self._end_ts = None
        self._apikey = None
        self._feature = None
        self._feature_query_mode = None
        self._service = None
        self._service_query_mode = None
        self._priority = None
        self._priority_query_mode = None
        self._report_tags = None
        self._tags = None
        self._report_all_tags = None
        self._step = None
        self.discriminator = None

        self.environment = environment
        if guard is not None:
            self.guard = guard
        if guard_query_mode is not None:
            self.guard_query_mode = guard_query_mode
        self.start_ts = start_ts
        self.end_ts = end_ts
        if apikey is not None:
            self.apikey = apikey
        if feature is not None:
            self.feature = feature
        if feature_query_mode is not None:
            self.feature_query_mode = feature_query_mode
        if service is not None:
            self.service = service
        if service_query_mode is not None:
            self.service_query_mode = service_query_mode
        if priority is not None:
            self.priority = priority
        if priority_query_mode is not None:
            self.priority_query_mode = priority_query_mode
        if report_tags is not None:
            self.report_tags = report_tags
        if tags is not None:
            self.tags = tags
        if report_all_tags is not None:
            self.report_all_tags = report_all_tags
        if step is not None:
            self.step = step

    @property
    def environment(self):
        """Gets the environment of this V1GetUsageRequest.  # noqa: E501

        If specified, only stats relating to the tags and features in selector will be returned.  If only guard and environment are specified, then stats relating to all tags and features will be returned.  # noqa: E501

        :return: The environment of this V1GetUsageRequest.  # noqa: E501
        :rtype: str
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this V1GetUsageRequest.

        If specified, only stats relating to the tags and features in selector will be returned.  If only guard and environment are specified, then stats relating to all tags and features will be returned.  # noqa: E501

        :param environment: The environment of this V1GetUsageRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and environment is None:
            raise ValueError(
                "Invalid value for `environment`, must not be `None`"
            )  # noqa: E501

        self._environment = environment

    @property
    def guard(self):
        """Gets the guard of this V1GetUsageRequest.  # noqa: E501

        Query for stats for this specific guard. If not specified then stats for all guards are returned.  # noqa: E501

        :return: The guard of this V1GetUsageRequest.  # noqa: E501
        :rtype: str
        """
        return self._guard

    @guard.setter
    def guard(self, guard):
        """Sets the guard of this V1GetUsageRequest.

        Query for stats for this specific guard. If not specified then stats for all guards are returned.  # noqa: E501

        :param guard: The guard of this V1GetUsageRequest.  # noqa: E501
        :type: str
        """

        self._guard = guard

    @property
    def guard_query_mode(self):
        """Gets the guard_query_mode of this V1GetUsageRequest.  # noqa: E501


        :return: The guard_query_mode of this V1GetUsageRequest.  # noqa: E501
        :rtype: V1QueryMode
        """
        return self._guard_query_mode

    @guard_query_mode.setter
    def guard_query_mode(self, guard_query_mode):
        """Sets the guard_query_mode of this V1GetUsageRequest.


        :param guard_query_mode: The guard_query_mode of this V1GetUsageRequest.  # noqa: E501
        :type: V1QueryMode
        """

        self._guard_query_mode = guard_query_mode

    @property
    def start_ts(self):
        """Gets the start_ts of this V1GetUsageRequest.  # noqa: E501


        :return: The start_ts of this V1GetUsageRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._start_ts

    @start_ts.setter
    def start_ts(self, start_ts):
        """Sets the start_ts of this V1GetUsageRequest.


        :param start_ts: The start_ts of this V1GetUsageRequest.  # noqa: E501
        :type: datetime
        """
        if self._configuration.client_side_validation and start_ts is None:
            raise ValueError(
                "Invalid value for `start_ts`, must not be `None`"
            )  # noqa: E501

        self._start_ts = start_ts

    @property
    def end_ts(self):
        """Gets the end_ts of this V1GetUsageRequest.  # noqa: E501


        :return: The end_ts of this V1GetUsageRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._end_ts

    @end_ts.setter
    def end_ts(self, end_ts):
        """Sets the end_ts of this V1GetUsageRequest.


        :param end_ts: The end_ts of this V1GetUsageRequest.  # noqa: E501
        :type: datetime
        """
        if self._configuration.client_side_validation and end_ts is None:
            raise ValueError(
                "Invalid value for `end_ts`, must not be `None`"
            )  # noqa: E501

        self._end_ts = end_ts

    @property
    def apikey(self):
        """Gets the apikey of this V1GetUsageRequest.  # noqa: E501

        Query for stats where this specific APIKey was used. If not specified then stats for all APIKeys are returned.  # noqa: E501

        :return: The apikey of this V1GetUsageRequest.  # noqa: E501
        :rtype: str
        """
        return self._apikey

    @apikey.setter
    def apikey(self, apikey):
        """Sets the apikey of this V1GetUsageRequest.

        Query for stats where this specific APIKey was used. If not specified then stats for all APIKeys are returned.  # noqa: E501

        :param apikey: The apikey of this V1GetUsageRequest.  # noqa: E501
        :type: str
        """

        self._apikey = apikey

    @property
    def feature(self):
        """Gets the feature of this V1GetUsageRequest.  # noqa: E501

        Query for stats about a specific feature. If not specified then stats for all features are returned.  # noqa: E501

        :return: The feature of this V1GetUsageRequest.  # noqa: E501
        :rtype: str
        """
        return self._feature

    @feature.setter
    def feature(self, feature):
        """Sets the feature of this V1GetUsageRequest.

        Query for stats about a specific feature. If not specified then stats for all features are returned.  # noqa: E501

        :param feature: The feature of this V1GetUsageRequest.  # noqa: E501
        :type: str
        """

        self._feature = feature

    @property
    def feature_query_mode(self):
        """Gets the feature_query_mode of this V1GetUsageRequest.  # noqa: E501


        :return: The feature_query_mode of this V1GetUsageRequest.  # noqa: E501
        :rtype: V1QueryMode
        """
        return self._feature_query_mode

    @feature_query_mode.setter
    def feature_query_mode(self, feature_query_mode):
        """Sets the feature_query_mode of this V1GetUsageRequest.


        :param feature_query_mode: The feature_query_mode of this V1GetUsageRequest.  # noqa: E501
        :type: V1QueryMode
        """

        self._feature_query_mode = feature_query_mode

    @property
    def service(self):
        """Gets the service of this V1GetUsageRequest.  # noqa: E501

        Query for stats about a specific service. If not specified then stats for all services are returned. Note that Stanza can only track service statistics if client_id is used when requesting service configuration at startup, and sent with quota requests.  # noqa: E501

        :return: The service of this V1GetUsageRequest.  # noqa: E501
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this V1GetUsageRequest.

        Query for stats about a specific service. If not specified then stats for all services are returned. Note that Stanza can only track service statistics if client_id is used when requesting service configuration at startup, and sent with quota requests.  # noqa: E501

        :param service: The service of this V1GetUsageRequest.  # noqa: E501
        :type: str
        """

        self._service = service

    @property
    def service_query_mode(self):
        """Gets the service_query_mode of this V1GetUsageRequest.  # noqa: E501


        :return: The service_query_mode of this V1GetUsageRequest.  # noqa: E501
        :rtype: V1QueryMode
        """
        return self._service_query_mode

    @service_query_mode.setter
    def service_query_mode(self, service_query_mode):
        """Sets the service_query_mode of this V1GetUsageRequest.


        :param service_query_mode: The service_query_mode of this V1GetUsageRequest.  # noqa: E501
        :type: V1QueryMode
        """

        self._service_query_mode = service_query_mode

    @property
    def priority(self):
        """Gets the priority of this V1GetUsageRequest.  # noqa: E501

        Query for stats about a specific priority level. If not specified then stats for all priorities are returned.  # noqa: E501

        :return: The priority of this V1GetUsageRequest.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this V1GetUsageRequest.

        Query for stats about a specific priority level. If not specified then stats for all priorities are returned.  # noqa: E501

        :param priority: The priority of this V1GetUsageRequest.  # noqa: E501
        :type: int
        """

        self._priority = priority

    @property
    def priority_query_mode(self):
        """Gets the priority_query_mode of this V1GetUsageRequest.  # noqa: E501


        :return: The priority_query_mode of this V1GetUsageRequest.  # noqa: E501
        :rtype: V1QueryMode
        """
        return self._priority_query_mode

    @priority_query_mode.setter
    def priority_query_mode(self, priority_query_mode):
        """Sets the priority_query_mode of this V1GetUsageRequest.


        :param priority_query_mode: The priority_query_mode of this V1GetUsageRequest.  # noqa: E501
        :type: V1QueryMode
        """

        self._priority_query_mode = priority_query_mode

    @property
    def report_tags(self):
        """Gets the report_tags of this V1GetUsageRequest.  # noqa: E501

        Tags matching listed tag keys will be reported (individual timeseries returned for each value).  # noqa: E501

        :return: The report_tags of this V1GetUsageRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._report_tags

    @report_tags.setter
    def report_tags(self, report_tags):
        """Sets the report_tags of this V1GetUsageRequest.

        Tags matching listed tag keys will be reported (individual timeseries returned for each value).  # noqa: E501

        :param report_tags: The report_tags of this V1GetUsageRequest.  # noqa: E501
        :type: list[str]
        """

        self._report_tags = report_tags

    @property
    def tags(self):
        """Gets the tags of this V1GetUsageRequest.  # noqa: E501

        Only stats relating to the specified tags will be returned.  # noqa: E501

        :return: The tags of this V1GetUsageRequest.  # noqa: E501
        :rtype: list[Hubv1Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this V1GetUsageRequest.

        Only stats relating to the specified tags will be returned.  # noqa: E501

        :param tags: The tags of this V1GetUsageRequest.  # noqa: E501
        :type: list[Hubv1Tag]
        """

        self._tags = tags

    @property
    def report_all_tags(self):
        """Gets the report_all_tags of this V1GetUsageRequest.  # noqa: E501

        Report all tag values for all tags as separate timeseries. Overrides tags and report_tags params.  # noqa: E501

        :return: The report_all_tags of this V1GetUsageRequest.  # noqa: E501
        :rtype: bool
        """
        return self._report_all_tags

    @report_all_tags.setter
    def report_all_tags(self, report_all_tags):
        """Sets the report_all_tags of this V1GetUsageRequest.

        Report all tag values for all tags as separate timeseries. Overrides tags and report_tags params.  # noqa: E501

        :param report_all_tags: The report_all_tags of this V1GetUsageRequest.  # noqa: E501
        :type: bool
        """

        self._report_all_tags = report_all_tags

    @property
    def step(self):
        """Gets the step of this V1GetUsageRequest.  # noqa: E501

        1m to 1w - m is minutes; h hours; d days; w weeks (7d). Defaults to a step that results in <100 results. Minimum step 1m.  # noqa: E501

        :return: The step of this V1GetUsageRequest.  # noqa: E501
        :rtype: str
        """
        return self._step

    @step.setter
    def step(self, step):
        """Sets the step of this V1GetUsageRequest.

        1m to 1w - m is minutes; h hours; d days; w weeks (7d). Defaults to a step that results in <100 results. Minimum step 1m.  # noqa: E501

        :param step: The step of this V1GetUsageRequest.  # noqa: E501
        :type: str
        """

        self._step = step

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(V1GetUsageRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1GetUsageRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1GetUsageRequest):
            return True

        return self.to_dict() != other.to_dict()
