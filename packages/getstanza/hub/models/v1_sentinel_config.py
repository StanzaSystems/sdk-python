# coding: utf-8

"""
    Stanza Hub API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@stanza.systems
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six
from getstanza.hub.configuration import Configuration


class V1SentinelConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "circuitbreaker_rules_json": "str",
        "flow_rules_json": "str",
        "isolation_rules_json": "str",
        "system_rules_json": "str",
    }

    attribute_map = {
        "circuitbreaker_rules_json": "circuitbreakerRulesJson",
        "flow_rules_json": "flowRulesJson",
        "isolation_rules_json": "isolationRulesJson",
        "system_rules_json": "systemRulesJson",
    }

    def __init__(
        self,
        circuitbreaker_rules_json=None,
        flow_rules_json=None,
        isolation_rules_json=None,
        system_rules_json=None,
        _configuration=None,
    ):  # noqa: E501
        """V1SentinelConfig - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._circuitbreaker_rules_json = None
        self._flow_rules_json = None
        self._isolation_rules_json = None
        self._system_rules_json = None
        self.discriminator = None

        if circuitbreaker_rules_json is not None:
            self.circuitbreaker_rules_json = circuitbreaker_rules_json
        if flow_rules_json is not None:
            self.flow_rules_json = flow_rules_json
        if isolation_rules_json is not None:
            self.isolation_rules_json = isolation_rules_json
        if system_rules_json is not None:
            self.system_rules_json = system_rules_json

    @property
    def circuitbreaker_rules_json(self):
        """Gets the circuitbreaker_rules_json of this V1SentinelConfig.  # noqa: E501


        :return: The circuitbreaker_rules_json of this V1SentinelConfig.  # noqa: E501
        :rtype: str
        """
        return self._circuitbreaker_rules_json

    @circuitbreaker_rules_json.setter
    def circuitbreaker_rules_json(self, circuitbreaker_rules_json):
        """Sets the circuitbreaker_rules_json of this V1SentinelConfig.


        :param circuitbreaker_rules_json: The circuitbreaker_rules_json of this V1SentinelConfig.  # noqa: E501
        :type: str
        """

        self._circuitbreaker_rules_json = circuitbreaker_rules_json

    @property
    def flow_rules_json(self):
        """Gets the flow_rules_json of this V1SentinelConfig.  # noqa: E501


        :return: The flow_rules_json of this V1SentinelConfig.  # noqa: E501
        :rtype: str
        """
        return self._flow_rules_json

    @flow_rules_json.setter
    def flow_rules_json(self, flow_rules_json):
        """Sets the flow_rules_json of this V1SentinelConfig.


        :param flow_rules_json: The flow_rules_json of this V1SentinelConfig.  # noqa: E501
        :type: str
        """

        self._flow_rules_json = flow_rules_json

    @property
    def isolation_rules_json(self):
        """Gets the isolation_rules_json of this V1SentinelConfig.  # noqa: E501


        :return: The isolation_rules_json of this V1SentinelConfig.  # noqa: E501
        :rtype: str
        """
        return self._isolation_rules_json

    @isolation_rules_json.setter
    def isolation_rules_json(self, isolation_rules_json):
        """Sets the isolation_rules_json of this V1SentinelConfig.


        :param isolation_rules_json: The isolation_rules_json of this V1SentinelConfig.  # noqa: E501
        :type: str
        """

        self._isolation_rules_json = isolation_rules_json

    @property
    def system_rules_json(self):
        """Gets the system_rules_json of this V1SentinelConfig.  # noqa: E501


        :return: The system_rules_json of this V1SentinelConfig.  # noqa: E501
        :rtype: str
        """
        return self._system_rules_json

    @system_rules_json.setter
    def system_rules_json(self, system_rules_json):
        """Sets the system_rules_json of this V1SentinelConfig.


        :param system_rules_json: The system_rules_json of this V1SentinelConfig.  # noqa: E501
        :type: str
        """

        self._system_rules_json = system_rules_json

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(V1SentinelConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1SentinelConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1SentinelConfig):
            return True

        return self.to_dict() != other.to_dict()
