# coding: utf-8

"""
    Stanza Hub API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@stanza.systems
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six
from getstanza.hub.configuration import Configuration


class V1GetGuardConfigRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {"version_seen": "str", "selector": "V1GuardServiceSelector"}

    attribute_map = {"version_seen": "versionSeen", "selector": "selector"}

    def __init__(
        self, version_seen=None, selector=None, _configuration=None
    ):  # noqa: E501
        """V1GetGuardConfigRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._version_seen = None
        self._selector = None
        self.discriminator = None

        if version_seen is not None:
            self.version_seen = version_seen
        if selector is not None:
            self.selector = selector

    @property
    def version_seen(self):
        """Gets the version_seen of this V1GetGuardConfigRequest.  # noqa: E501

        Set if the client has seen a previous version of the config. Server will send data only if newer config available.  # noqa: E501

        :return: The version_seen of this V1GetGuardConfigRequest.  # noqa: E501
        :rtype: str
        """
        return self._version_seen

    @version_seen.setter
    def version_seen(self, version_seen):
        """Sets the version_seen of this V1GetGuardConfigRequest.

        Set if the client has seen a previous version of the config. Server will send data only if newer config available.  # noqa: E501

        :param version_seen: The version_seen of this V1GetGuardConfigRequest.  # noqa: E501
        :type: str
        """

        self._version_seen = version_seen

    @property
    def selector(self):
        """Gets the selector of this V1GetGuardConfigRequest.  # noqa: E501

        Information required to select and return the correct GuardConfig version.  # noqa: E501

        :return: The selector of this V1GetGuardConfigRequest.  # noqa: E501
        :rtype: V1GuardServiceSelector
        """
        return self._selector

    @selector.setter
    def selector(self, selector):
        """Sets the selector of this V1GetGuardConfigRequest.

        Information required to select and return the correct GuardConfig version.  # noqa: E501

        :param selector: The selector of this V1GetGuardConfigRequest.  # noqa: E501
        :type: V1GuardServiceSelector
        """

        self._selector = selector

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(V1GetGuardConfigRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1GetGuardConfigRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1GetGuardConfigRequest):
            return True

        return self.to_dict() != other.to_dict()
