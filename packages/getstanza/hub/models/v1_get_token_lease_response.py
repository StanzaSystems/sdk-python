# coding: utf-8

"""
    Stanza Hub API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@stanza.systems
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six
from getstanza.hub.configuration import Configuration


class V1GetTokenLeaseResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {"granted": "bool", "leases": "list[V1TokenLease]"}

    attribute_map = {"granted": "granted", "leases": "leases"}

    def __init__(self, granted=None, leases=None, _configuration=None):  # noqa: E501
        """V1GetTokenLeaseResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._granted = None
        self._leases = None
        self.discriminator = None

        self.granted = granted
        if leases is not None:
            self.leases = leases

    @property
    def granted(self):
        """Gets the granted of this V1GetTokenLeaseResponse.  # noqa: E501


        :return: The granted of this V1GetTokenLeaseResponse.  # noqa: E501
        :rtype: bool
        """
        return self._granted

    @granted.setter
    def granted(self, granted):
        """Sets the granted of this V1GetTokenLeaseResponse.


        :param granted: The granted of this V1GetTokenLeaseResponse.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and granted is None:
            raise ValueError(
                "Invalid value for `granted`, must not be `None`"
            )  # noqa: E501

        self._granted = granted

    @property
    def leases(self):
        """Gets the leases of this V1GetTokenLeaseResponse.  # noqa: E501


        :return: The leases of this V1GetTokenLeaseResponse.  # noqa: E501
        :rtype: list[V1TokenLease]
        """
        return self._leases

    @leases.setter
    def leases(self, leases):
        """Sets the leases of this V1GetTokenLeaseResponse.


        :param leases: The leases of this V1GetTokenLeaseResponse.  # noqa: E501
        :type: list[V1TokenLease]
        """

        self._leases = leases

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(V1GetTokenLeaseResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1GetTokenLeaseResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1GetTokenLeaseResponse):
            return True

        return self.to_dict() != other.to_dict()
