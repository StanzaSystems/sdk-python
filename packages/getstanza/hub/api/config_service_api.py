# coding: utf-8

"""
    Stanza Hub API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@stanza.systems
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six
from getstanza.hub.api_client import ApiClient


class ConfigServiceApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def config_service_get_browser_context(self, body, **kwargs):  # noqa: E501
        """Get Browser Context  # noqa: E501

        Used by SDK to get a Browser Context from Stanza Hub.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.config_service_get_browser_context(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1GetBrowserContextRequest body: The request from Browser SDKs for a Browser Context. SDKs are expected to periodically poll, giving the version of the most recent configuration seen. Configurations may be large; we will not re-send them unless they have changed. (required)
        :return: V1GetBrowserContextResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.config_service_get_browser_context_with_http_info(
                body, **kwargs
            )  # noqa: E501
        else:
            (data) = self.config_service_get_browser_context_with_http_info(
                body, **kwargs
            )  # noqa: E501
            return data

    def config_service_get_browser_context_with_http_info(
        self, body, **kwargs
    ):  # noqa: E501
        """Get Browser Context  # noqa: E501

        Used by SDK to get a Browser Context from Stanza Hub.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.config_service_get_browser_context_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1GetBrowserContextRequest body: The request from Browser SDKs for a Browser Context. SDKs are expected to periodically poll, giving the version of the most recent configuration seen. Configurations may be large; we will not re-send them unless they have changed. (required)
        :return: V1GetBrowserContextResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method config_service_get_browser_context" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and (
            "body" not in params or params["body"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `body` when calling `config_service_get_browser_context`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["ApiKeyAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/v1/context/browser",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="V1GetBrowserContextResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def config_service_get_guard_config(self, body, **kwargs):  # noqa: E501
        """Get Guard Config  # noqa: E501

        Used by SDK to get a Guard Config from Stanza Hub.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.config_service_get_guard_config(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1GetGuardConfigRequest body: Request from Backend SDKs for a Guard Config. SDKs are expected to periodically poll, giving the version of the most recent configuration seen. Configurations may be large; we will not re-send them unless they have changed. Guard configurations may vary between environments but are SHARED between Services. (required)
        :return: V1GetGuardConfigResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.config_service_get_guard_config_with_http_info(
                body, **kwargs
            )  # noqa: E501
        else:
            (data) = self.config_service_get_guard_config_with_http_info(
                body, **kwargs
            )  # noqa: E501
            return data

    def config_service_get_guard_config_with_http_info(
        self, body, **kwargs
    ):  # noqa: E501
        """Get Guard Config  # noqa: E501

        Used by SDK to get a Guard Config from Stanza Hub.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.config_service_get_guard_config_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1GetGuardConfigRequest body: Request from Backend SDKs for a Guard Config. SDKs are expected to periodically poll, giving the version of the most recent configuration seen. Configurations may be large; we will not re-send them unless they have changed. Guard configurations may vary between environments but are SHARED between Services. (required)
        :return: V1GetGuardConfigResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method config_service_get_guard_config" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and (
            "body" not in params or params["body"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `body` when calling `config_service_get_guard_config`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["ApiKeyAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/v1/config/guard",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="V1GetGuardConfigResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def config_service_get_service_config(self, body, **kwargs):  # noqa: E501
        """Get Service Config  # noqa: E501

        Used by SDK to get a Service Config from Stanza Hub.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.config_service_get_service_config(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1GetServiceConfigRequest body: The request from Backend SDKs for a Service Config. SDKs are expected to periodically poll, giving the version of the most recent configuration seen. Configurations may be large; we will not re-send them unless they have changed. (required)
        :return: V1GetServiceConfigResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.config_service_get_service_config_with_http_info(
                body, **kwargs
            )  # noqa: E501
        else:
            (data) = self.config_service_get_service_config_with_http_info(
                body, **kwargs
            )  # noqa: E501
            return data

    def config_service_get_service_config_with_http_info(
        self, body, **kwargs
    ):  # noqa: E501
        """Get Service Config  # noqa: E501

        Used by SDK to get a Service Config from Stanza Hub.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.config_service_get_service_config_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1GetServiceConfigRequest body: The request from Backend SDKs for a Service Config. SDKs are expected to periodically poll, giving the version of the most recent configuration seen. Configurations may be large; we will not re-send them unless they have changed. (required)
        :return: V1GetServiceConfigResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method config_service_get_service_config" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and (
            "body" not in params or params["body"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `body` when calling `config_service_get_service_config`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params[
            "Content-Type"
        ] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["ApiKeyAuth"]  # noqa: E501

        return self.api_client.call_api(
            "/v1/config/service",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="V1GetServiceConfigResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
